<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Clojure on Arjen Wiersma</title><link>https://www.arjenwiersma.nl/tags/clojure/</link><description>Recent content in Clojure on Arjen Wiersma</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Jan 2025 00:00:00 +0100</lastBuildDate><atom:link href="https://www.arjenwiersma.nl/tags/clojure/index.xml" rel="self" type="application/rss+xml"/><item><title>Choose your tools</title><link>https://www.arjenwiersma.nl/posts/choose-your-tools/</link><pubDate>Sun, 05 Jan 2025 00:00:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/choose-your-tools/</guid><description>&lt;p>Originally posted on 2024-09-30 (Monday).&lt;/p>
&lt;p>I ❤️ to build software. I sadly do not have a lot of time next to my daily work to spend on my side projects, so I have to be disciplined in where I invest time. I wish I could spend endless amounts of time on exploring new technologies, but sadly I simply do not have that time. In writing this is sometimes referred to as &lt;a href="https://www.masterclass.com/articles/what-does-it-mean-to-kill-your-darlings">&amp;ldquo;to kill your darlings&amp;rdquo;&lt;/a>.&lt;/p></description></item><item><title>Enhance testability with selmer</title><link>https://www.arjenwiersma.nl/posts/using-selmer/</link><pubDate>Tue, 08 Oct 2024 19:42:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/using-selmer/</guid><description>&lt;p>This is my first article in a series called &lt;strong>Rock Solid Software&lt;/strong>. In it I explore different dimensions of software that does not simply break. You can write good software in any programming language, although some are more suited to a disciplined practice then others, Clojure is definitely in the &lt;em>relaxed&lt;/em> space of discipline here.&lt;/p>
&lt;p>Today I am exploring the use of Selmer templates in Clojure. If you have explored &lt;a href="https://www.biffweb.com">Biff&lt;/a> at all you will know that all the UI logic works by sending &lt;code>Hiccup&lt;/code> through a handler, which will turn into HTML through &lt;code>rum&lt;/code> (specifically the &lt;code>wrap-render-rum&lt;/code> middleware). If you provide a vector as a result for an endpoint, it will be converted to HTML.&lt;/p></description></item></channel></rss>