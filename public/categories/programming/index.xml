<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Arjen Wiersma</title>
    <link>http://localhost:1313/categories/programming/</link>
    <description>Recent content in Programming on Arjen Wiersma</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Arjen Wiersma</copyright>
    <lastBuildDate>Wed, 05 Feb 2025 20:40:54 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clojure Projects</title>
      <link>http://localhost:1313/posts/20250205-clojure-projects/</link>
      <pubDate>Wed, 05 Feb 2025 20:40:54 +0100</pubDate>
      <guid>http://localhost:1313/posts/20250205-clojure-projects/</guid>
      <description>&lt;p&gt;When I tell people that I like to code in &lt;a href=&#34;http://localhost:1313/notes/clojure/&#34; class=&#34;backlink&#34;&gt;Clojure&lt;/a&gt;&#xA; the common response is &amp;ldquo;&lt;em&gt;wut?&lt;/em&gt;&amp;rdquo;. Clojure is not known as a programming language in which you create big systems. As all Clojure people know, this is not true. There are many systems written in Clojure. Let me show you some that are very actively maintained.&lt;/p&gt;&#xA;&lt;p&gt;First there is &lt;a href=&#34;https://www.lipas.fi/liikuntapaikat&#34;&gt;Lipas&lt;/a&gt;, a Finnish platform that shows you information about sports clubs. The structure and techniques used &lt;a href=&#34;https://github.com/lipas-liikuntapaikat/lipas/&#34;&gt;in this code base&lt;/a&gt; I use as a reference implementation for my own ClojureScript + Clojure systems. A screenshot of the application is shown here:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Observability in Clojure</title>
      <link>http://localhost:1313/posts/20250201-observability-in-clojure/</link>
      <pubDate>Sat, 01 Feb 2025 13:03:45 +0100</pubDate>
      <guid>http://localhost:1313/posts/20250201-observability-in-clojure/</guid>
      <description>&lt;p&gt;Observability in cloud-native applications is crucial for managing complex systems and ensuring reliability (&lt;a href=&#34;https://doi.org/10.1007/978-1-4842-6888-9_2&#34;&gt;Chakraborty &amp;amp; Kundan, 2021&lt;/a&gt;; &lt;a href=&#34;https://doi.org/10.1109/ACCESS.2023.3281860&#34;&gt;Kosi≈Ñska et al., 2023&lt;/a&gt;). It enables continuous generation of actionable insights based on system signals, helping teams deliver excellent customer experiences despite underlying complexities (&lt;a href=&#34;https://doi.org/10.48550/arXiv.2303.13402&#34;&gt;Hausenblas, 2023&lt;/a&gt;; &lt;a href=&#34;https://doi.org/10.1007/978-1-4842-6888-9_2&#34;&gt;Chakraborty &amp;amp; Kundan, 2021&lt;/a&gt;). In essence, adding proper observability to your system allows you to find and diagnose issues without having to dig through tons of unstructured log files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Digital Ocean, its support and development database</title>
      <link>http://localhost:1313/posts/20250126-digital-ocean-dev-database/</link>
      <pubDate>Sun, 26 Jan 2025 12:31:17 +0100</pubDate>
      <guid>http://localhost:1313/posts/20250126-digital-ocean-dev-database/</guid>
      <description>&lt;figure&#xA;  role=&#34;note&#34;&#xA;  id=&#34;admonition-00&#34;&#xA;  aria-labelledby=&#34;admonition-caption-00&#34;&#xA;  class=&#34;admonition tip  not-prose&#34;&#xA;&gt;&#xA;  &lt;div class=&#34;flex items-center space-x-2 pb-2 font-semibold&#34;&gt;&#xA;      &lt;svg&#xA;  xmlns=&#34;http://www.w3.org/2000/svg&#34;&#xA;  width=&#34;24&#34;&#xA;  height=&#34;24&#34;&#xA;  fill=&#34;none&#34;&#xA;  stroke=&#34;currentColor&#34;&#xA;  stroke-linecap=&#34;round&#34;&#xA;  stroke-linejoin=&#34;round&#34;&#xA;  stroke-width=&#34;2&#34;&#xA;  class=&#34;lucide lucide-flame block&#34;&#xA;&gt;&#xA;  &lt;path&#xA;    d=&#34;M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z&#34;&#xA;  /&gt;&#xA;&lt;/svg&gt;&#xA;&#xA;    &lt;figcaption id=&#34;admonition-caption-00&#34;&gt;&#xA;        Tip&#xA;    &lt;/figcaption&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;  &lt;div class=&#34;prose pl-8 text-inherit marker:text-inherit&#34;&gt;&#xA;    Currently, only use Postgres 14 on the Digital Ocean application platform for development databases.&#xA;  &lt;/div&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;While following the book &lt;a href=&#34;http://localhost:1313/notes/zero2prod/&#34; class=&#34;backlink&#34;&gt;Zero2Prod&lt;/a&gt;&#xA; you will learn how to deploy a &lt;a href=&#34;http://localhost:1313/notes/rust/&#34; class=&#34;backlink&#34;&gt;Rust&lt;/a&gt;&#xA; application to digital ocean through a Continuous Deployment pipeline. This is hardly anything new for me, I even teach a course in DevOps, but to not stray from the path of the book I followed its instructions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The joy of NixOS</title>
      <link>http://localhost:1313/posts/20250111-happy-with-nixos/</link>
      <pubDate>Sat, 11 Jan 2025 14:31:20 +0100</pubDate>
      <guid>http://localhost:1313/posts/20250111-happy-with-nixos/</guid>
      <description>&lt;p&gt;In July 2023, I installed NixOS as my daily operating system. NixOS is a Linux distribution that emphasizes a declarative approach to system management. This means you define your desired operating system configuration in a file (e.g., KDE with Emacs 30 and Firefox), and the Nix package manager uses that file to create your OS. Every change generates a new version, allowing you to revert to a previous version if anything goes wrong.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up Emacs for Clojure development</title>
      <link>http://localhost:1313/notes/clojure-emacs/</link>
      <pubDate>Thu, 09 Jan 2025 20:25:59 +0100</pubDate>
      <guid>http://localhost:1313/notes/clojure-emacs/</guid>
      <description>&lt;p&gt;Emacs ü•∞ Lisp, and as &lt;a href=&#34;http://localhost:1313/notes/clojure/&#34; class=&#34;backlink&#34;&gt;Clojure&lt;/a&gt;&#xA; is a Lisp like language, Emacs is extremely capable in editing it. I use several packages to make my live a joy inside Emacs, here are the &lt;a href=&#34;http://localhost:1313/notes/clojure/&#34; class=&#34;backlink&#34;&gt;Clojure&lt;/a&gt;&#xA; specific packages:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://paredit.org/&#34;&gt;paredit&lt;/a&gt;: I highly recommend it to work with any lisp, it makes working with the parenthesis a real joy. There is an &lt;a href=&#34;http://danmidwood.com/content/2014/11/21/animated-paredit.html&#34;&gt;animated guide&lt;/a&gt; of most of the features.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cider.mx/&#34;&gt;cider&lt;/a&gt;: The only thing you need to run and work with Clojure files&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/borkdude/flycheck-clj-kondo&#34;&gt;flycheck-clj-kondo&lt;/a&gt;: brings the hints from &lt;a href=&#34;https://github.com/clj-kondo/clj-kondo&#34;&gt;clj-kondo&lt;/a&gt; to the editing screen.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/clojure-emacs/clj-refactor.el&#34;&gt;clj-refactor&lt;/a&gt;: provides all the refactoring tools you will need&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/clojure-emacs/clojure-mode&#34;&gt;clojure-mode&lt;/a&gt;: finally the clojure mode to provide basic features (highlighting, indentation, navigation and basic refactoring) into Emacs.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I have an &lt;a href=&#34;https://www.youtube.com/playlist?list=PLdKXxqwRv6_y7rHHjbrK38E59t9ost3o3&#34;&gt;YouTube playlist&lt;/a&gt; on my channel that covers most of these tools. The videos are from 2016 (when I did my live coding in Clojure series), but are still very relevant today.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build an API with reitit in Clojure</title>
      <link>http://localhost:1313/posts/20250107-clojure-reitit-server/</link>
      <pubDate>Tue, 07 Jan 2025 22:22:22 +0100</pubDate>
      <guid>http://localhost:1313/posts/20250107-clojure-reitit-server/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://localhost:1313/posts/a-new-theme/&#34; class=&#34;backlink&#34;&gt;my previous post&lt;/a&gt;&#xA; I highlighted that I set myself the goal of creating a self hosted comic book collection tool. Before that, in &lt;a href=&#34;http://localhost:1313/posts/choose-your-tools/&#34; class=&#34;backlink&#34;&gt;a post about tooling&lt;/a&gt;&#xA;, I reiterated my ‚ù§Ô∏è for &lt;a href=&#34;http://localhost:1313/notes/clojure/&#34; class=&#34;backlink&#34;&gt;Clojure&lt;/a&gt;&#xA; as a language. So, this is the start of a series of articles detailing how the development is going, and also as an introduction to the various parts of the tech stack.&lt;/p&gt;&#xA;&lt;p&gt;Clojure is special to me in that there are hardly any big frameworks in the ecosystem. Clojure is more like Lego, there are countless building blocks of various shapes and sizes. It is up to you as the developer to stick the blocks together to get something usefull. You might guess that I also ‚ù§Ô∏è Lego.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Clojure programming language</title>
      <link>http://localhost:1313/notes/clojure/</link>
      <pubDate>Tue, 07 Jan 2025 22:18:54 +0100</pubDate>
      <guid>http://localhost:1313/notes/clojure/</guid>
      <description>&lt;p&gt;The Clojure programming language. It is a functional programming language on top of dthe JVM. It is a Lisp like language.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configuring Emacs for Rust development</title>
      <link>http://localhost:1313/notes/rust-emacs/</link>
      <pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/rust-emacs/</guid>
      <description>&lt;p&gt;Emacs is great for editing &lt;a href=&#34;http://localhost:1313/notes/rust/&#34; class=&#34;backlink&#34;&gt;Rust&lt;/a&gt;&#xA; source files. In addition to your normal Emacs configuration (such as completion modes) it requires 3 packages. First you will want &lt;code&gt;lsp-mode&lt;/code&gt;, a very full featured LSP client for Emacs. Additionally you will want &lt;code&gt;lsp-ui&lt;/code&gt;, which I only use for the &lt;code&gt;lsp-ui-imenu&lt;/code&gt; feature.&lt;/p&gt;&#xA;&lt;p&gt;Finally you will want to use &lt;code&gt;rustic&lt;/code&gt; as primary editing mode for &lt;a href=&#34;http://localhost:1313/notes/rust/&#34; class=&#34;backlink&#34;&gt;Rust&lt;/a&gt;&#xA; files.&lt;/p&gt;&#xA;&lt;figure class=&#34;codeblock not-prose relative scroll-mt-8&#34; id=&#34;codeblock-01&#34;&gt;&#xA;  &lt;aside&#xA;    class=&#34;absolute right-0 top-0 hidden rounded-bl-sm rounded-tr-sm bg-white/10 px-2 py-1 text-white/70 transition-opacity md:inline-block&#34;&#xA;  &gt;&#xA;    &lt;div class=&#34;codeblock-meta flex max-w-xs flex-row items-center space-x-3&#34;&gt;&#xA;      &lt;div class=&#34;small-caps shrink cursor-default truncate font-mono text-xs&#34; aria-hidden=&#34;true&#34;&gt;&#xA;        &lt;span class=&#34;relative&#34;&gt;elisp&lt;/span&gt;&#xA;      &lt;/div&gt;&#xA;      &lt;div&gt;&#xA;        &lt;clipboard-copy&#xA;          type=&#34;button&#34;&#xA;          aria-label=&#34;Copy code to clipboard&#34;&#xA;          title=&#34;Copy code to clipboard&#34;&#xA;          class=&#34;block cursor-pointer transition-colors hover:text-sky-400&#34;&#xA;          target=&#34;#codeblock-01 code&#34;&#xA;        &gt;&#xA;          &lt;svg&#xA;  xmlns=&#34;http://www.w3.org/2000/svg&#34;&#xA;  fill=&#34;none&#34;&#xA;  stroke=&#34;currentColor&#34;&#xA;  stroke-width=&#34;2&#34;&#xA;  stroke-linecap=&#34;round&#34;&#xA;  stroke-linejoin=&#34;round&#34;&#xA;  class=&#34;lucide lucide-clipboard h-4 w-4&#34;&#xA;  viewBox=&#34;0 0 24 24&#34;&#xA;&gt;&#xA;  &lt;rect width=&#34;8&#34; height=&#34;4&#34; x=&#34;8&#34; y=&#34;2&#34; rx=&#34;1&#34; ry=&#34;1&#34; /&gt;&#xA;  &lt;path d=&#34;M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2&#34; /&gt;&#xA;&lt;/svg&gt;&#xA;&#xA;        &lt;/clipboard-copy&gt;&#xA;      &lt;/div&gt;&#xA;      &lt;div&gt;&#xA;        &lt;a&#xA;          href=&#34;#codeblock-01&#34;&#xA;          class=&#34;block&#34;&#xA;          aria-label=&#34;Link to this code block&#34;&#xA;          title=&#34;Link to this code block&#34;&#xA;        &gt;&#xA;          &lt;svg&#xA;  xmlns=&#34;http://www.w3.org/2000/svg&#34;&#xA;  width=&#34;16&#34;&#xA;  height=&#34;16&#34;&#xA;  fill=&#34;none&#34;&#xA;  stroke=&#34;currentColor&#34;&#xA;  stroke-linecap=&#34;round&#34;&#xA;  stroke-linejoin=&#34;round&#34;&#xA;  stroke-width=&#34;2&#34;&#xA;  class=&#34;lucide lucide-link w-4 h-4 block&#34;&#xA;  viewBox=&#34;0 0 24 24&#34;&#xA;&gt;&#xA;  &lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; /&gt;&#xA;  &lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; /&gt;&#xA;&lt;/svg&gt;&#xA;&#xA;        &lt;/a&gt;&#xA;      &lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/aside&gt;&#xA;  &lt;p class=&#34;sr-only&#34;&gt;elisp code snippet start&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Rust programming language</title>
      <link>http://localhost:1313/notes/rust/</link>
      <pubDate>Sun, 05 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/rust/</guid>
      <description>&lt;p&gt;This is the rust programming language&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
