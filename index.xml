<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Arjen Wiersma</title><link>https://www.arjenwiersma.nl/</link><description>Recent content on Arjen Wiersma</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 10 Dec 2024 00:00:00 +0100</lastBuildDate><atom:link href="https://www.arjenwiersma.nl/index.xml" rel="self" type="application/rss+xml"/><item><title>Advent of Code 2024</title><link>https://www.arjenwiersma.nl/posts/aoc-2024/</link><pubDate>Tue, 10 Dec 2024 00:00:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/aoc-2024/</guid><description>&lt;p>It is December again and that means it is time for the &lt;a href="https://adventofcode.com/">Advent of Code&lt;/a>. Due to my workload and family obligations I will probably not be able to get very far this year, but still I wanted to write a post about it.&lt;/p>
&lt;p>This year I am using Java, together with my students. My goal is to write as modern as possible Java, which means using streams and new language constructs where possible.&lt;/p></description></item><item><title>The right to repair</title><link>https://www.arjenwiersma.nl/posts/ifixit-dell/</link><pubDate>Wed, 04 Dec 2024 22:13:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/ifixit-dell/</guid><description>&lt;p>My old laptop, now almost 6 years old, has seen it all. From conferences, to lectures, traveling to distant places and to the library. I did a lot of work on it during the writing of my thesis, and it is a victim to countless hours of compiler time.&lt;/p>
&lt;p>Sadly the battery started to die. It got to the point that you can only use it shortly for heavier loads. Luckily, unlike certain hardware (looking at you Apple), it is easy to fix. All it needs is a new battery. So I found that &lt;a href="https://www.ifixit.com/Guide">ifixit&lt;/a> had the right parts and a &lt;strong>very&lt;/strong> useful kit with all the right tools to do the job.&lt;/p></description></item><item><title>Remembering Bastiaan</title><link>https://www.arjenwiersma.nl/posts/remembering-bastiaan/</link><pubDate>Mon, 02 Dec 2024 18:41:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/remembering-bastiaan/</guid><description>&lt;p>Today the academic world is remembering &lt;a href="https://cs.ou.nl/members/bastiaan/">Bastiaan Heeren&lt;/a>, who passed away last week.&lt;/p>
&lt;p>I spent the better time of a year working on my thesis, and before that I enjoyed lectures given by Bastiaan. He was a person with a great love for teaching, especially when you can get into the nitty gritty details of software quality and the benefits of functional programming.&lt;/p>
&lt;p>I look back fondly on my time with Bastiaan. He was an open, warm, critical and encouraging human being. He had a great love for his family and work.&lt;/p></description></item><item><title>Using Traefik</title><link>https://www.arjenwiersma.nl/posts/setting-up-traefik/</link><pubDate>Sun, 17 Nov 2024 12:18:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/setting-up-traefik/</guid><description>&lt;p>I recently came across &lt;a href="https://traefik.io/traefik/">Traefik&lt;/a>. It is a reverse proxy built specifically for services in the cloud. I was searching for a convenient (up-to-date) way to expose my project using a reverse proxy within &lt;code>docker-compose&lt;/code>. I used to use &lt;code>nginx&lt;/code> for this, but it then requires a generator and an lets encrypt listener (so 3 containers). Traefik only requires a single container and allows you to label your docker containers to apply rules to them.&lt;/p></description></item><item><title>Enhance testability with selmer</title><link>https://www.arjenwiersma.nl/posts/using-selmer/</link><pubDate>Tue, 08 Oct 2024 19:42:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/using-selmer/</guid><description>&lt;p>This is my first article in a series called &lt;strong>Rock Solid Software&lt;/strong>. In it I explore different dimensions of software that does not simply break. You can write good software in any programming language, although some are more suited to a disciplined practice then others, Clojure is definitely in the &lt;em>relaxed&lt;/em> space of discipline here.&lt;/p>
&lt;p>Today I am exploring the use of Selmer templates in Clojure. If you have explored &lt;a href="https://www.biffweb.com">Biff&lt;/a> at all you will know that all the UI logic works by sending &lt;code>Hiccup&lt;/code> through a handler, which will turn into HTML through &lt;code>rum&lt;/code> (specifically the &lt;code>wrap-render-rum&lt;/code> middleware). If you provide a vector as a result for an endpoint, it will be converted to HTML.&lt;/p></description></item><item><title>Choose your tools</title><link>https://www.arjenwiersma.nl/posts/choose-your-tools/</link><pubDate>Mon, 30 Sep 2024 14:25:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/choose-your-tools/</guid><description>&lt;p>I ❤️ to build software. I sadly do not have a lot of time next to my daily work to spend on my side projects, so I have to be disciplined in where I invest time. I wish I could spend endless amounts of time on exploring new technologies, but sadly I simply do not have that time. In writing this is sometimes referred to as &lt;a href="https://www.masterclass.com/articles/what-does-it-mean-to-kill-your-darlings">&amp;ldquo;to kill your darlings&amp;rdquo;&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>Sir Arthur Quiller-Couch wrote in his 1916 book On the Art of Writing: “If you here require a practical rule of me, I will present you with this: ‘Whenever you feel an impulse to perpetrate a piece of exceptionally fine writing, obey it—whole-heartedly—and delete it before sending your manuscript to press. Murder your darlings.’”&lt;/p></description></item><item><title>Bronnen beheren met Zotero [NL]</title><link>https://www.arjenwiersma.nl/posts/learn-to-stud-zotero/</link><pubDate>Tue, 03 Sep 2024 19:22:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/learn-to-stud-zotero/</guid><description>&lt;figure>
&lt;img loading="lazy" src="https://www.arjenwiersma.nl/ox-hugo/_20240722_203307screenshot.png"/>
&lt;/figure>
&lt;p>Je hebt &lt;a href="https://www.arjenwiersma.nl/posts/leren-studeren-tijd-vinden/">tijd gereserveerd om te gaan studeren&lt;/a> en &lt;a href="https://www.arjenwiersma.nl/posts/learn-to-stud-deepwork/">je volgt een ritueel om goed in jouw &amp;ldquo;Deep Work&amp;rdquo; modus te komen&lt;/a>, dat studeren gaat echt goed lukken! Tijdens de colleges en in de lesmaterialen vind je allerlei links naar papers, websites, YouTube videos en haal je veel informatie uit boeken. Al deze bronnen zijn zeer waardevol en bij de eindopdracht zul je veel van deze bronnen weer moeten gebruiken om argumenten te onderbouwen of juist iets te ontkrachten. Hoe ga je dan om met die bronnen zonder dat je gek wordt van allerlei documentjes?&lt;/p></description></item><item><title> "Deep Work" voor het studeren [NL]</title><link>https://www.arjenwiersma.nl/posts/learn-to-stud-deepwork/</link><pubDate>Wed, 21 Aug 2024 22:52:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/learn-to-stud-deepwork/</guid><description>&lt;figure>
&lt;img loading="lazy" src="https://www.arjenwiersma.nl/ox-hugo/_20240720_225806screenshot.png"/>
&lt;/figure>
&lt;p>In &lt;a href="https://www.arjenwiersma.nl/posts/leren-studeren-tijd-vinden/">mijn vorige artikel&lt;/a> heb ik uitgelegd hoe je tijd kunt vinden om te studeren, de vraag is echter, is alle tijd hetzelfde? Het simpele antwoord is &amp;ldquo;nee&amp;rdquo;. Maar waarom niet, zul je vragen, en daarmee komen we op het onderwerp van dit artikel.&lt;/p>
&lt;p>Cal Newport heeft een fantastisch boek geschreven, &amp;ldquo;&lt;a href="https://www.bol.com/nl/nl/p/deep-work/9200000047340481/?bltgh=ujEmm8L1hL083Qs4-KJKSQ.2_18.19.ProductTitle">Deep Work: Rules for Focused Success in a Distracted World&lt;/a>&amp;rdquo;. In dit boek onderzoekt hij hoe je gefocust werkt en wat er voor nodig is om gefocust te blijven [1]. In het boek identificeert hij 2 soorten werk; &amp;ldquo;Deep Work&amp;rdquo; en &amp;ldquo;Shallow Work&amp;rdquo;. Deze concepten hebben voor mij de aanpak van mijn dagelijkse werk zelfs veranderd, maar dat is een verhaal voor een andere keer.&lt;/p></description></item><item><title>Finding time to study</title><link>https://www.arjenwiersma.nl/posts/learn-to-stud-finding-time/</link><pubDate>Mon, 15 Jul 2024 23:05:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/learn-to-stud-finding-time/</guid><description>&lt;p>This is an English article, there is also a &lt;a href="https://www.arjenwiersma.nl/posts/leren-studeren-tijd-vinden">Dutch version&lt;/a>.&lt;/p>
&lt;p>So, you&amp;rsquo;ve decided to start studying? Maybe you want to earn your Bachelor or Master&amp;rsquo;s degree, or perhaps you&amp;rsquo;re aiming for that highly technical certificate. It&amp;rsquo;s great that you&amp;rsquo;re taking this step, but once you begin, you&amp;rsquo;ll quickly need to answer the question of where you&amp;rsquo;ll find the time.&lt;/p>
&lt;p>Time is our most valuable, non-renewable resource. Studying requires time – and not just a little – so you naturally want to use it well. Most programs expect you to invest between 12 and 24 hours per week to keep up, and that&amp;rsquo;s quite a bit! If you&amp;rsquo;re not currently studying, try thinking about which days and times you could free up that time. Will you eat out less or exercise less? Get up early on weekends or stay up late?&lt;/p></description></item><item><title>Tijd vinden om te studeren [Dutch article]</title><link>https://www.arjenwiersma.nl/posts/leren-studeren-tijd-vinden/</link><pubDate>Mon, 15 Jul 2024 23:05:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/leren-studeren-tijd-vinden/</guid><description>&lt;p>This is a Dutch artcile, there is also an &lt;a href="https://www.arjenwiersma.nl/posts/learn-to-stud-finding-time">English version&lt;/a>.&lt;/p>
&lt;p>Dus, jij hebt besloten om te gaan studeren? Misschien wil je jouw HBO- of Masterdiploma halen, of juist dat ene supertechnische certificaat bemachtigen. Het is geweldig dat je deze stap gaat zetten, maar zodra je begint, zul je vrij snel de vraag moeten beantwoorden waar je de tijd vandaan haalt.&lt;/p>
&lt;p>Tijd is onze meest waardevolle, niet-hernieuwbare bron. Studeren vergt tijd – en niet zo&amp;rsquo;n klein beetje ook – dus wil je het natuurlijk goed doen. De meeste studies verwachten dat je wekelijks ergens tussen de 12 en 24 uur investeert om bij te blijven, en dat is flink wat! Als je nog niet studeert, probeer dan eens na te denken over welke dagen en momenten je die tijd kunt vrijmaken. Ga je minder uit eten of juist minder sporten? Vroeg opstaan in het weekend, of juist extra laat naar bed?&lt;/p></description></item><item><title>Master of Puppets^HScience!</title><link>https://www.arjenwiersma.nl/posts/master-of-science/</link><pubDate>Mon, 24 Jun 2024 21:47:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/master-of-science/</guid><description>&lt;p>So, on Thursday I defended my thesis in front of the graduation committee, and passed! This means that the work I have been doing for the last year comes to an end. From now on there are not long nights and weekends working on my thesis anymore.&lt;/p>
&lt;p>Back in 2021 I started my journey of achieving a Master&amp;rsquo;s degree, first with a connecting program and then with the 2 year Master program. Even though I have been in computer science in some form for the last 30 years I still found it to be quite a learning experience.&lt;/p></description></item><item><title>Resigning as Hack The Box Ambassador</title><link>https://www.arjenwiersma.nl/posts/resigning-as-htb-ambassador/</link><pubDate>Tue, 28 May 2024 22:50:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/resigning-as-htb-ambassador/</guid><description>&lt;p>So, today I have some news. I will be resigning as Ambassador for Hack The Box after our in-person meetup in June (2024). This means that I will be stepping down from organizing the monthly virtual and quarterly in-person Hack The Box meetups. Let me explain how I got to this decision.&lt;/p>
&lt;h2 id="the-beginning">The beginning&lt;/h2>
&lt;p>So, in 2019, I started out building a cyber security curriculum for &lt;a href="https://www.novi.nl">NOVI Hogeschool&lt;/a>. I had the ability to greenfield the courses and create something that is of value to students. In this curriculum I started using Hack The Box for exercises and training next to the regular classwork.&lt;/p></description></item><item><title>The cyber cafe podcast</title><link>https://www.arjenwiersma.nl/posts/cyber-cafe-podcast/</link><pubDate>Tue, 09 Apr 2024 20:39:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/cyber-cafe-podcast/</guid><description>&lt;p>Last week I was a guest on the Cyber Cafe podcast by &lt;a href="https://rootsec.nl/">rootsec&lt;/a>. It was a fun discussion on education and the current xz backdoor story. It is in the Dutch language. It is available on youtube and included below:&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/at2S1aP6p6E?si=NI9s0wz6JWfuHIAD" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen>&lt;/iframe></description></item><item><title>Microsoft Teams (v2) on Linux</title><link>https://www.arjenwiersma.nl/posts/ms-teams-on-linux/</link><pubDate>Mon, 01 Apr 2024 10:29:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/ms-teams-on-linux/</guid><description>&lt;p>This post is just a small note for those of you who also run Microsoft Teams on Linux through their browser and now receive a note &amp;ldquo;your browser does not meet the requirements for the new Teams&amp;rdquo;. It turns out that the client is looking at the user-agent string to determine which browsers it accepts, and which not.&lt;/p>
&lt;p>So, if you have the message, install an user-agent switcher and select a common browser on a common OS (from the MS perspective) and you will suddenly meet the requirements.&lt;/p></description></item><item><title>My computing environment</title><link>https://www.arjenwiersma.nl/posts/my-computing-environment/</link><pubDate>Sun, 18 Feb 2024 15:35:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/my-computing-environment/</guid><description>&lt;blockquote>
&lt;p>This is a longer form article. I is relevant as of &lt;strong>February 18th 2023&lt;/strong>. If the circumstances of my environment changes I will try to update this article to reflect the situation. You can find the full source code of my dotfiles on &lt;a href="https://github.com/credmp/nixos-dotfiles/">Github&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>I like consistency and simplicity. I do not like to use many different tools to do different things, I rather spend my time learning to use a few tools very well then to follow the hype on the latest trend of tools for something we have been doing forever.&lt;/p></description></item><item><title>Heading to the finish line</title><link>https://www.arjenwiersma.nl/posts/ou-heading-to-the-finish-line/</link><pubDate>Sat, 17 Feb 2024 20:59:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/ou-heading-to-the-finish-line/</guid><description>&lt;p>It has been a little while. I have been swamped with work and the work on my thesis, leaving no room to finish the Advent of Code or much of anything else.&lt;/p>
&lt;p>Yesterday I gave my practice presentation for my thesis. This means I am one more step closer to the finish line. During the day there were many interactions with fellow students. One of the topics has been the templates to use at Open Universiteit. So, I thought I would just create a repository of the templates that I use, so that anyone can learn from them.&lt;/p></description></item><item><title>Advent of Code 2023 day 9</title><link>https://www.arjenwiersma.nl/posts/aoc-2023-day-9/</link><pubDate>Sat, 09 Dec 2023 07:29:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/aoc-2023-day-9/</guid><description>&lt;p>The weekend generally is a place to find hard puzzles again, this time not so much. A simple quest to find the next number in a sequence with a fully written out algorithm to follow. They key here is to use recursion.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;arjenwiersma.nl/aoc/internal/aoc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">func&lt;/span> &lt;span style="color:#89b4fa">NextStep&lt;/span>(in []&lt;span style="color:#f38ba8">int&lt;/span>) &lt;span style="color:#f38ba8">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> allZero &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#fab387">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, v &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> in {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> v &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> allZero = &lt;span style="color:#fab387">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> allZero {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">var&lt;/span> diffs []&lt;span style="color:#f38ba8">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i &amp;lt; &lt;span style="color:#89dceb">len&lt;/span>(in); i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> diffs = &lt;span style="color:#89dceb">append&lt;/span>(diffs, in[i]&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>in[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#89b4fa">NextStep&lt;/span>(diffs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> in[&lt;span style="color:#89dceb">len&lt;/span>(in)&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">func&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> aoc.&lt;span style="color:#89b4fa">AsLines&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;2023/Day09/input.txt&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">var&lt;/span> lines [][]&lt;span style="color:#f38ba8">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, v &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> content {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines = &lt;span style="color:#89dceb">append&lt;/span>(lines, aoc.&lt;span style="color:#89b4fa">AsNumbers&lt;/span>(v))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> startTime &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> time.&lt;span style="color:#89b4fa">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">var&lt;/span> res []&lt;span style="color:#f38ba8">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, v &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> lines {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res = &lt;span style="color:#89dceb">append&lt;/span>(res, &lt;span style="color:#89b4fa">NextStep&lt;/span>(v))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> aoc.&lt;span style="color:#89b4fa">SumArray&lt;/span>(res)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endTime &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> time.&lt;span style="color:#89b4fa">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elapsed &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> endTime.&lt;span style="color:#89b4fa">Sub&lt;/span>(startTime)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#89b4fa">Printf&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Part 1: %d (%v)\n&amp;#34;&lt;/span>, r, elapsed)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> startTime = time.&lt;span style="color:#89b4fa">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, v &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> lines {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> aoc.&lt;span style="color:#89b4fa">Reverse&lt;/span>(v)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res = []&lt;span style="color:#f38ba8">int&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, v &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> lines {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res = &lt;span style="color:#89dceb">append&lt;/span>(res, &lt;span style="color:#89b4fa">NextStep&lt;/span>(v))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r = aoc.&lt;span style="color:#89b4fa">SumArray&lt;/span>(res)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endTime = time.&lt;span style="color:#89b4fa">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elapsed = endTime.&lt;span style="color:#89b4fa">Sub&lt;/span>(startTime)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#89b4fa">Printf&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Part 2: %d (%v)\n&amp;#34;&lt;/span>, r, elapsed)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Advent of Code 2023 day 8</title><link>https://www.arjenwiersma.nl/posts/aoc-2023-day-8/</link><pubDate>Sat, 09 Dec 2023 07:27:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/aoc-2023-day-8/</guid><description>&lt;p>Somewhat suspicious of 2 easy days we end up at Day 8. A simple map to follow again, from one key follow the instructions until we hit &lt;code>ZZZ&lt;/code>. Part 2 had us do it for several keys at once, with the goal to find the spot where they all converge. This can take &lt;strong>forever&lt;/strong>, erhm, a long time.&lt;/p>
&lt;p>So there has to be a math type solution to this problem. It turns out to be a Least Common Multiple problem. It is the smallest positive integer that is divisible by two or more numbers without leaving a remainder. To find the LCM of two or more numbers, you can use a method called prime factorization or a simpler approach involving multiples. We can also use the Greatest Common Divisor (GCD) to find the LCM.&lt;/p></description></item><item><title>Advent of Code 2023 day 7</title><link>https://www.arjenwiersma.nl/posts/aoc-2023-day-7/</link><pubDate>Sat, 09 Dec 2023 07:18:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/aoc-2023-day-7/</guid><description>&lt;p>Today we learned about CamelCards, a game of poker meant to play on the back of a camel. The most interesting part here was the parsing of the cards and figuring out how to properly rank them. Part 2 turned out to be as easy as tracking Jokers.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;sort&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;strconv&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;strings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;arjenwiersma.nl/aoc/internal/aoc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">type&lt;/span> Card &lt;span style="color:#f38ba8">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bid &lt;span style="color:#f38ba8">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hand []&lt;span style="color:#f38ba8">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jokers &lt;span style="color:#f38ba8">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">func&lt;/span> (c &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>Card) &lt;span style="color:#89b4fa">strongerThen&lt;/span>(o &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>Card) &lt;span style="color:#f38ba8">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i, v &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> c.hand {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> v &amp;gt; o.hand[i] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> v &amp;lt; o.hand[i] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">func&lt;/span> (c &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>Card) &lt;span style="color:#89b4fa">rank&lt;/span>() &lt;span style="color:#f38ba8">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#89dceb">make&lt;/span>([]&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#fab387">15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, v &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> c.hand {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> v &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span> { &lt;span style="color:#6c7086;font-style:italic">// skip counting the joker
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq[v]&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sort.&lt;span style="color:#89b4fa">Ints&lt;/span>(freq)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq[&lt;span style="color:#89dceb">len&lt;/span>(freq)&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> c.jokers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strength &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> freq[&lt;span style="color:#89dceb">len&lt;/span>(freq)&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// full house and 2 pair
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> freq[&lt;span style="color:#89dceb">len&lt;/span>(freq)&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">2&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">2&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strength &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> strength
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">func&lt;/span> &lt;span style="color:#89b4fa">NewCard&lt;/span>(s &lt;span style="color:#f38ba8">string&lt;/span>, bid &lt;span style="color:#f38ba8">int&lt;/span>, p2 &lt;span style="color:#f38ba8">bool&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>Card {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>Card{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c.bid = bid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c.jokers = &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> p &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; p &amp;lt; &lt;span style="color:#89dceb">len&lt;/span>(s); p&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> s[p]&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> s[p]&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#fab387">9&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c.hand = &lt;span style="color:#89dceb">append&lt;/span>(c.hand, &lt;span style="color:#89dceb">int&lt;/span>(s[p]&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;0&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#fab387">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">switch&lt;/span> s[p] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x = &lt;span style="color:#fab387">14&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;K&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x = &lt;span style="color:#fab387">13&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;Q&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x = &lt;span style="color:#fab387">12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;J&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> p2 {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c.jokers &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x = &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x = &lt;span style="color:#fab387">11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;T&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x = &lt;span style="color:#fab387">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c.hand = &lt;span style="color:#89dceb">append&lt;/span>(c.hand, x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">func&lt;/span> (c &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>Card) &lt;span style="color:#89b4fa">String&lt;/span>() &lt;span style="color:#f38ba8">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> fmt.&lt;span style="color:#89b4fa">Sprintf&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;%v (%d)&amp;#34;&lt;/span>, c.hand, c.bid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">func&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> aoc.&lt;span style="color:#89b4fa">AsLines&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;2023/Day07/input.txt&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">var&lt;/span> cards []&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>Card
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, v &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> content {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> strings.&lt;span style="color:#89b4fa">Split&lt;/span>(v, &lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b, _ &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> strconv.&lt;span style="color:#89b4fa">Atoi&lt;/span>(p[&lt;span style="color:#fab387">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#89b4fa">NewCard&lt;/span>(p[&lt;span style="color:#fab387">0&lt;/span>], b, &lt;span style="color:#fab387">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cards = &lt;span style="color:#89dceb">append&lt;/span>(cards, c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> startTime &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> time.&lt;span style="color:#89b4fa">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lessFunc &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#f38ba8">func&lt;/span>(i, j &lt;span style="color:#f38ba8">int&lt;/span>) &lt;span style="color:#f38ba8">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> cards[i].&lt;span style="color:#89b4fa">rank&lt;/span>() &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> cards[j].&lt;span style="color:#89b4fa">rank&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> cards[j].&lt;span style="color:#89b4fa">strongerThen&lt;/span>(cards[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> cards[i].&lt;span style="color:#89b4fa">rank&lt;/span>() &amp;lt; cards[j].&lt;span style="color:#89b4fa">rank&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sort.&lt;span style="color:#89b4fa">Slice&lt;/span>(cards, lessFunc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i, c &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> cards {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> (i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> c.bid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endTime &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> time.&lt;span style="color:#89b4fa">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elapsed &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> endTime.&lt;span style="color:#89b4fa">Sub&lt;/span>(startTime)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#fab387">251216224&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> res {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">panic&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Wrong answer&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#89b4fa">Printf&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Part 1: %d (%v)\n&amp;#34;&lt;/span>, res, elapsed) &lt;span style="color:#6c7086;font-style:italic">// 251216224
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cards = []&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>Card{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, v &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> content {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> strings.&lt;span style="color:#89b4fa">Split&lt;/span>(v, &lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b, _ &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> strconv.&lt;span style="color:#89b4fa">Atoi&lt;/span>(p[&lt;span style="color:#fab387">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#89b4fa">NewCard&lt;/span>(p[&lt;span style="color:#fab387">0&lt;/span>], b, &lt;span style="color:#fab387">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cards = &lt;span style="color:#89dceb">append&lt;/span>(cards, c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> startTime = time.&lt;span style="color:#89b4fa">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sort.&lt;span style="color:#89b4fa">Slice&lt;/span>(cards, lessFunc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res = &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i, c &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> cards {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> (i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> c.bid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endTime = time.&lt;span style="color:#89b4fa">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elapsed = endTime.&lt;span style="color:#89b4fa">Sub&lt;/span>(startTime)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#fab387">250825971&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> res {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">panic&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Wrong part 2&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#89b4fa">Printf&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Part 2: %d (%v)\n&amp;#34;&lt;/span>, res, elapsed) &lt;span style="color:#6c7086;font-style:italic">// 250825971
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Advent of Code 2023 day 6</title><link>https://www.arjenwiersma.nl/posts/aoc-2023-day-6/</link><pubDate>Sat, 09 Dec 2023 07:16:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/aoc-2023-day-6/</guid><description>&lt;p>Day 6 turned out to be the easiest day in the range so far. A simple implementation of the algorithm was more than sufficient.&lt;/p>
&lt;p>I later learned that it was a quadratic function. On the subreddit Deatranger999 said:&lt;/p>
&lt;blockquote>
&lt;p>If you hold down the button for x seconds, then you will beat the distance if the quadratic x^2 - t x + d is at most 0, where t is the total time of the race and d is the distance you&amp;rsquo;d like to beat. So I just plugged each one into WolframAlpha, found the roots, and then calculated the number of integers between the two roots.&lt;/p></description></item><item><title>Advent of Code 2023 day 5</title><link>https://www.arjenwiersma.nl/posts/aoc-2023-day-5/</link><pubDate>Sat, 09 Dec 2023 07:13:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/aoc-2023-day-5/</guid><description>&lt;p>Today was an interesting problem. We are basically given a map to follow based on a number, possibly transforming the number at each step. With a single number this is quite simple, just apply the rules and step through each set of transformations. The problem becomes tricky when it turns out we have to deal with enormous ranges of numbers. On the subreddit some people reported their implementation to take hours and use 20GB of memory.&lt;/p></description></item><item><title>Advent of Code 2023 Day 4</title><link>https://www.arjenwiersma.nl/posts/aoc-2023-day-4/</link><pubDate>Mon, 04 Dec 2023 23:16:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/aoc-2023-day-4/</guid><description>&lt;p>The difficulty is going up and down. This day was quite easy in comparison to yesterday. Today it was about parsing some numbers and finding a set of winning numbers.&lt;/p>
&lt;p>As I am doing these puzzles in Go I found out that there is no default &lt;code>set&lt;/code> type. There is an implementation by HashiCorp named &lt;a href="https://github.com/hashicorp/go-set">go-set&lt;/a> that fills this void. I did not use an external package (I try to avoid them while doing AoC), but I am very tempted to pull that package in.&lt;/p></description></item><item><title>Advent of Code 2023 Day 3</title><link>https://www.arjenwiersma.nl/posts/aoc-2023-day-3/</link><pubDate>Sun, 03 Dec 2023 12:38:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/aoc-2023-day-3/</guid><description>&lt;p>Day 3 was quite something. I think that in an attempt to make it harder for AI to solve the puzzles the creators also increased the difficulty level of the base puzzles a little too much. The test was not very clear as to what should happen with negative numbers and it might trip people up. The puzzle itself is a great to exercise grid knowledge as you have to work with neighbors and you have to extend the numbers when you find them. Part 2 was just some bookkeeping on my existing implementation, so it was not too much work.&lt;/p></description></item><item><title>Advent of Code 2023 Day 2</title><link>https://www.arjenwiersma.nl/posts/aoc-2023-day-2/</link><pubDate>Sat, 02 Dec 2023 14:41:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/aoc-2023-day-2/</guid><description>&lt;p>Day 2 was another fun challenge. Lots of splitting of strings. I wonder if there is a better way to filter out the min and max value from the separate grabs.&lt;/p>
&lt;p>I am sure I will not be able to complete all challenges this year, but so far so good.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;strconv&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;strings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">type&lt;/span> Grab &lt;span style="color:#f38ba8">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> red, green, blue &lt;span style="color:#f38ba8">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">type&lt;/span> Game &lt;span style="color:#f38ba8">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id &lt;span style="color:#f38ba8">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grabs []Grab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">func&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content, _ &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> os.&lt;span style="color:#89b4fa">ReadFile&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;2023/Day02/input.txt&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">var&lt;/span> input []Game
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> g, l &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> strings.&lt;span style="color:#89b4fa">Split&lt;/span>(strings.&lt;span style="color:#89b4fa">TrimSpace&lt;/span>(&lt;span style="color:#89dceb">string&lt;/span>(content)), &lt;span style="color:#a6e3a1">&amp;#34;\n&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> game &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> Game{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> game.id = g &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parts &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> strings.&lt;span style="color:#89b4fa">Split&lt;/span>(l, &lt;span style="color:#a6e3a1">&amp;#34;:&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grabs &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> strings.&lt;span style="color:#89b4fa">Split&lt;/span>(parts[&lt;span style="color:#fab387">1&lt;/span>], &lt;span style="color:#a6e3a1">&amp;#34;;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, h &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> grabs {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grab &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> Grab{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, rgb &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> strings.&lt;span style="color:#89b4fa">Split&lt;/span>(h, &lt;span style="color:#a6e3a1">&amp;#34;,&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> color &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> strings.&lt;span style="color:#89b4fa">Split&lt;/span>(strings.&lt;span style="color:#89b4fa">TrimSpace&lt;/span>(rgb), &lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i, _ &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> strconv.&lt;span style="color:#89b4fa">Atoi&lt;/span>(color[&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">switch&lt;/span> color[&lt;span style="color:#fab387">1&lt;/span>] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;red&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grab.red = i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;green&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grab.green = i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;blue&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grab.blue = i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> game.grabs = &lt;span style="color:#89dceb">append&lt;/span>(game.grabs, grab)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input = &lt;span style="color:#89dceb">append&lt;/span>(input, game)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> Grab{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> red: &lt;span style="color:#fab387">12&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> green: &lt;span style="color:#fab387">13&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blue: &lt;span style="color:#fab387">14&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">var&lt;/span> possible []Game
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>outer:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, game &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> input {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, grab &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> game.grabs {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> grab.red &amp;gt; max.red &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> grab.green &amp;gt; max.green &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> grab.blue &amp;gt; max.blue {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span> outer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// fmt.Println(&amp;#34;Possible game: &amp;#34;, game)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> possible = &lt;span style="color:#89dceb">append&lt;/span>(possible, game)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, g &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> possible {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> g.id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#89b4fa">Println&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Part 1: &amp;#34;&lt;/span>, sum)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">var&lt;/span> powers []Grab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, game &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> input {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> Grab{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> red: &lt;span style="color:#fab387">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> green: &lt;span style="color:#fab387">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blue: &lt;span style="color:#fab387">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, grab &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> game.grabs {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> grab.red &amp;gt; min.red {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min.red = grab.red
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> grab.green &amp;gt; min.green {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min.green = grab.green
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> grab.blue &amp;gt; min.blue {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min.blue = grab.blue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> powers = &lt;span style="color:#89dceb">append&lt;/span>(powers, min)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum = &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _, x &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#cba6f7">range&lt;/span> powers {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> x.red &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> x.green &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> x.blue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#89b4fa">Println&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Part 2: &amp;#34;&lt;/span>, sum)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Advent of Code 2023 Day 1</title><link>https://www.arjenwiersma.nl/posts/aoc-2023-day-1/</link><pubDate>Sat, 02 Dec 2023 14:39:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/aoc-2023-day-1/</guid><description>&lt;p>The &lt;a href="https://www.adventofcode.com">Advent of Code&lt;/a> has started again. At &lt;a href="https://www.novi.nl">NOVI&lt;/a> we participate with a group of our students. We use the AoC throughout the entire curriculum as practice exercises to learn new programming languages or the application of data-structures and algorithms.&lt;/p>
&lt;p>Day 1 was a tricky start for most people. Part 1 was not too bad, but part 2 tripped most people up. I guess the idea was that you would have to solve the challenge with an array iteration, but most students tripped up. They tried to match each word and replace the occurrence in the text, running head-on into the edge-case where 2 numbers overlap, such as &amp;ldquo;eightwo&amp;rdquo;.&lt;/p></description></item><item><title> Embarking on a Journey to Revolutionize Code Editing: The Birth of "BiDE"</title><link>https://www.arjenwiersma.nl/posts/the-start-of-bide/</link><pubDate>Mon, 04 Sep 2023 20:44:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/the-start-of-bide/</guid><description>&lt;p>As the warm haze of summer gives way to the crisp air of autumn, the season marks a pivotal moment in my academic journey: the commencement of my Master&amp;rsquo;s thesis project. Having successfully had my research proposal accepted earlier this year, I now face the last leg of this marathon—bringing my theoretical framework to life.&lt;/p>
&lt;h2 id="the-powerhouse-partnership-open-universiteit-and-cwi">The Powerhouse Partnership: Open Universiteit and CWI&lt;/h2>
&lt;p>While undertaking a Master&amp;rsquo;s thesis is a significant endeavor on its own, I always have to make it more complex. My research will be a collaborative effort between two prominent institutions: the Open Universiteit and the Centrum Wiskunde &amp;amp; Informatica (CWI).&lt;/p></description></item><item><title>Perfectionism leads to procrastination and paralysis</title><link>https://www.arjenwiersma.nl/posts/perfectionsim-procrastination/</link><pubDate>Tue, 06 Jun 2023 08:15:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/perfectionsim-procrastination/</guid><description>&lt;p>Working on my thesis research proposal has been quite the journey, and not always in the direction I would have chosen. A personal revelation that struck me during the process is the tight and rather vexing relationship between perfectionism, procrastination, and paralysis.&lt;/p>
&lt;p>It&amp;rsquo;s often said that the perfect is the enemy of the good. In my quest for the &amp;lsquo;just right&amp;rsquo; words to articulate my thoughts, I found this saying to be glaringly accurate. The ticking clock became a dull backdrop to my cerebral scavenger hunt. My concentration started to drift and instead of zeroing in on my research proposal, I found myself fixated on, of all things, the color scheme of my desktop environment.&lt;/p></description></item><item><title>Using AI in academics</title><link>https://www.arjenwiersma.nl/posts/ai-in-academics/</link><pubDate>Sat, 20 May 2023 11:00:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/ai-in-academics/</guid><description>&lt;p>Using AI, in particular generative models such as GPT, are in contention within academics. The purity of academics resides in students writing on their research and having their work peer-reviewed. But how can you now be sure that the student wrote the paper and how can you trust its content? Many universities, including the OU have written about it. The OU published an article in &lt;a href="https://modulair.ou.nl/modulair-2023-april/chatgpt-in-het-onderwijs">Modulair about it&lt;/a>. Generally, the consensus seems to be that it is ok to use AI as an assistant, but you must write your texts.&lt;/p></description></item><item><title>Starting my Master Thesis</title><link>https://www.arjenwiersma.nl/posts/starting-master-thesis/</link><pubDate>Thu, 13 Apr 2023 22:15:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/starting-master-thesis/</guid><description>&lt;p>Today, I took the first step towards starting my master&amp;rsquo;s thesis. I have decided to document my journey and experiences on my blog. Given that the thesis will play a pivotal role in my life for the next nine months, I expect it to be a thrilling journey.&lt;/p>
&lt;h2 id="finding-a-topic">Finding a topic&lt;/h2>
&lt;p>As a student at &lt;a href="https://www.ou.nl">Open Universiteit&lt;/a> in The Netherlands, I had the opportunity to work with the &lt;a href="https://rascal-mpl.org">Rascal programming language&lt;/a> during the Software Quality Management course. I found the language intriguing and enjoyed working with it throughout the module. After consulting with my professor, we brainstormed various possibilities for my master&amp;rsquo;s thesis topic, ultimately settling on the creation of a visualization library for the language.&lt;/p></description></item><item><title>Open Universiteit: Software Quality Management</title><link>https://www.arjenwiersma.nl/posts/ou-sqm/</link><pubDate>Sat, 25 Mar 2023 16:31:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/ou-sqm/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>I have been working on getting my Master&amp;rsquo;s degree in Software Engineering. To do this I have started following courses at the Dutch Open Universiteit. They have a Master&amp;rsquo;s program that takes 2 years and you are able to follow it from home.&lt;/p>
&lt;p>As this is my first post on the courses, I will give some background. As a teacher it is recommended to have a Master&amp;rsquo;s degree. As I had a whole lot of work experience my teaching activities were not a problem, but from an overall point of view I was advised to pursue an Master degree. As my highest educational level up to now is a Bachelor I first had to follow a pre-master program before I could start the Master program. I will write about my experiences of the pre-master program later.&lt;/p></description></item><item><title>Badge Challenge 3</title><link>https://www.arjenwiersma.nl/posts/badge-challenge-3/</link><pubDate>Sun, 12 Mar 2023 12:10:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/badge-challenge-3/</guid><description>&lt;h2 id="original-post">Original Post&lt;/h2>
&lt;p>During each in-person Hack The Box meetup I have a small badge challenge that will give the first solver of the challenge a price. at the meetup of March 2023 there will be a very nice little challenge to be done as well, a beautiful NOVI hoodie. You can already download the password protected zip archive. The password will be shared during the meetup opening words.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.arjenwiersma.nl/files/badge3.zip">The zip archive&lt;/a> (sha1: 28e84243c79caefce06f62ba2c5d930de37a3439)&lt;/li>
&lt;/ul>
&lt;p>Good luck. Afterwards I will post a walkthrough of the challenge on this site. Badge Life is hard :)&lt;/p></description></item><item><title>Deployment Anxiety</title><link>https://www.arjenwiersma.nl/posts/deployment-anxiety/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/deployment-anxiety/</guid><description>&lt;p>Let me tell you how it was to ship a product out to half a million people back in 1999. But before I do that, let me tell you why. Today I talked to one of my students and he mentioned that he was very nervous about a change he was making. He was afraid it would break things and that he would spend the afternoon working through his CI/CD pipeline to resolve issues.&lt;/p></description></item><item><title>Cleaning up after LSP-mode</title><link>https://www.arjenwiersma.nl/posts/cleaning-up-lsp-mode/</link><pubDate>Mon, 07 Nov 2022 00:00:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/cleaning-up-lsp-mode/</guid><description>&lt;p>I use &lt;a href="https://emacs-lsp.github.io/lsp-mode/">lsp-mode&lt;/a> quite extensively. I switched from eglot when I started using LSP more. The beautify of lsp-mode is that it will automatically install language servers as you need them. It also integrates excellently with &lt;a href="https://emacs-lsp.github.io/dap-mode/">dap-mode&lt;/a> to enable debugging sessions. So, I switched to it, turned off all the information overload and I am quite happy.&lt;/p>
&lt;p>One thing I do extensively is that I use LaTeX to make my slides for college class slides and class assignments. That means I have hundreds of directories with presentations, assignments and other documents. Each time I enter a directory for a class it will spawn an LSP session for that set of LaTeX files.&lt;/p></description></item><item><title>Should we pay for open source?</title><link>https://www.arjenwiersma.nl/posts/should-we-pay-for-oss/</link><pubDate>Sun, 06 Nov 2022 00:00:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/should-we-pay-for-oss/</guid><description>&lt;p>As the world is processing the &lt;a href="https://www.forbes.com/sites/petersuciu/2022/11/05/twitter-is-facing-a-great-exodus--can-the-company-remain-profitable-if-it-loses-its-power-users/?sh=3a3aaec0212a">Twitter deal&lt;/a> the open source project &lt;a href="https://joinmastodon.org/">Mastodon&lt;/a> is gaining a lot of traction. The instance that I am on, &lt;a href="https://fostodon.org">fosstodon&lt;/a>, is run by a small team and is fully funded by &lt;a href="https://hub.fosstodon.org/support/">donations&lt;/a>.&lt;/p>
&lt;p>Now this may sound somewhat strange; as the twitterverse is blowing up about $8/month for a blue checkmark I would argue that the $8 is better spent supporting open source projects. As developers, security people, and users we rely on a lot of free time and effort from open source contributors.&lt;/p></description></item><item><title>22 years of Emacs</title><link>https://www.arjenwiersma.nl/posts/22-years-of-emacs/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0100</pubDate><guid>https://www.arjenwiersma.nl/posts/22-years-of-emacs/</guid><description>&lt;h2 id="where-to-begin-dot-dot-dot">Where to begin&amp;hellip;&lt;/h2>
&lt;p>I just watched David Wilson&amp;rsquo;s talk called &lt;a href="https://emacsconf.org/2021/talks/forever/">M-x forever - why Emacs will outlast text editor trends&lt;/a>. He gave this talk at &lt;a href="https://emacsconf.org/">EmacsConf 2021&lt;/a> which is a conference dedicated to Emacs. The talk made me reflect on my use of Emacs over the last years and then I realized that this year will mark 22 years that Emacs and I have been together. This (probably too long) article reflects on those years and dives into my use of Emacs.&lt;/p></description></item><item><title>Hack The Box Ambassador</title><link>https://www.arjenwiersma.nl/posts/htb-ambassador/</link><pubDate>Wed, 29 Sep 2021 00:00:00 +0200</pubDate><guid>https://www.arjenwiersma.nl/posts/htb-ambassador/</guid><description>&lt;figure>
&lt;img loading="lazy" src="https://www.arjenwiersma.nl/ox-hugo/header.jpg"/>
&lt;/figure>
&lt;p>For the last 18 months I have organized the dutch Hack The Box meetups. Due to COVID-19 they have all been as a digital meetup, but not less entertaining though.&lt;/p>
&lt;p>During my time organizing the meetups the Hack The Box organization supports me in various ways; they give me stuff to hand out such as swag or VIP memberships, they help organize speakers for events when we don&amp;rsquo;t have one ourselves and they provide me with Hack The Box goodies every once in a while.&lt;/p></description></item><item><title>🌍 Connecting to the vpn</title><link>https://www.arjenwiersma.nl/handbook/100_basics/vpn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.arjenwiersma.nl/handbook/100_basics/vpn/</guid><description>&lt;p>
&lt;a href="https://help.hackthebox.com/en/articles/5185687-introduction-to-lab-access">HTB Documentation: Introduction to lab access&lt;/a>.&lt;/p>
&lt;p>
Hack The Box uses a VPN (Virtual Private Network) to connect the users to the machines. To connect to this network we use a tool called &lt;code>openvpn&lt;/code>.&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Download the openvpn file.
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;ol>
&lt;li>Login to Hack The Box.&lt;/li>
&lt;li>Click on the &amp;#34;Connect to HTB&amp;#34; button.&lt;/li>
&lt;li>Select the server you want to connect to, then select &lt;code>OpenVPN&lt;/code>.&lt;/li>
&lt;li>Download the OpenVPN file.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="./connect.png" alt="./connect.png" title="./connect.png" />&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Connect with OpenVPN
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>
Open the file with &lt;code>openvpn&lt;/code> within Kali:&lt;/p></description></item><item><title>🐚 Reverse Shells</title><link>https://www.arjenwiersma.nl/handbook/400_shells/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.arjenwiersma.nl/handbook/400_shells/</guid><description>&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Automatically upgrade a shell
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
By using the following listener any connecting shell will run &lt;code>python3&lt;/code> to get an interactive shell, and it will instantly run &lt;code>stty raw -echo&lt;/code> to make sure arrows and control characters work.&lt;/p>
&lt;div class="src src-shell">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>stty raw -echo; &lt;span style="color:#89dceb;font-weight:bold">(&lt;/span>&lt;span style="color:#89dceb">echo&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;python3 -c &amp;#34;import pty;pty.spawn(\&amp;#34;/bin/bash\&amp;#34;)&amp;#34;&amp;#39;&lt;/span>;&lt;span style="color:#89dceb">echo&lt;/span> pty;&lt;span style="color:#89dceb">echo&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;stty&lt;/span>&lt;span style="color:#cba6f7">$(&lt;/span>stty -a | awk -F &lt;span style="color:#a6e3a1">&amp;#39;;&amp;#39;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;{print $2 $3}&amp;#39;&lt;/span> | head -n 1&lt;span style="color:#cba6f7">)&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;&lt;span style="color:#89dceb">echo&lt;/span> &lt;span style="color:#89dceb">export&lt;/span> &lt;span style="color:#f5e0dc">PATH&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#89b4fa">\$&lt;/span>PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp;&lt;span style="color:#89dceb">echo&lt;/span> &lt;span style="color:#89dceb">export&lt;/span> &lt;span style="color:#f5e0dc">TERM&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>xterm-color;&lt;span style="color:#89dceb">echo&lt;/span> &lt;span style="color:#89dceb">alias&lt;/span> &lt;span style="color:#f5e0dc">ll&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;ls -lsaht&amp;#39;&lt;/span>; &lt;span style="color:#89dceb">echo&lt;/span> clear; &lt;span style="color:#89dceb">echo&lt;/span> id;cat&lt;span style="color:#89dceb;font-weight:bold">)&lt;/span> | nc -lvnp &lt;span style="color:#fab387">1234&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> reset&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Upgrade a non-interactive shell
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
Using python
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;div class="src src-text">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>python3 -c &amp;#39;import pty; pty.spawn(&amp;#34;/bin/bash&amp;#34;);&amp;#39;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-3">
&lt;h3 id="headline-4">
Using the script command
&lt;/h3>
&lt;div id="outline-text-headline-4" class="outline-text-3">
&lt;div class="src src-text">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>script /dev/null -c bash&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Basic Linux Commands</title><link>https://www.arjenwiersma.nl/handbook/100_basics/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.arjenwiersma.nl/handbook/100_basics/linux/</guid><description>&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Copy contents of a file to the clipboard
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
The &lt;code>xclip&lt;/code> command is very useful when you want to copy files to the clipboard.&lt;/p>
&lt;div class="src src-text">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>sudo apt install xclip&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
Use it as follows to put something on the internal clipboard of your VM:&lt;/p>
&lt;div class="src src-text">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>cat file | xclip -selection clipboard&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
If you want to use it to copy something from you VM to your host machine, use the &lt;code>primary&lt;/code>.&lt;/p></description></item><item><title>Injection based brute forcer (HTTP)</title><link>https://www.arjenwiersma.nl/handbook/500_code/bruteforcer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.arjenwiersma.nl/handbook/500_code/bruteforcer/</guid><description>&lt;p>
Below you will find a bruteforcer for HTTP based NoSQL injections. Obviously, this code is easily adjusted to any type of injection attack through HTTP.&lt;/p>
&lt;p>
The code will start by iterating over the alphabet, digits and punctuation characters. When a username is found that starts with one of them, through &lt;code>check_username&lt;/code>, the rest of the username is brute forced in &lt;code>brute_username&lt;/code>. When completing the username, the user&amp;#39;s password is also attacked using &lt;code>brute_password&lt;/code>.&lt;/p></description></item><item><title>SNMP</title><link>https://www.arjenwiersma.nl/handbook/200_scanning/snmp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.arjenwiersma.nl/handbook/200_scanning/snmp/</guid><description>&lt;p>
Simple Network Management Protocol (SNMP) is an internet protocol used to manage and monitor network devices such as routers, switches, and servers. It operates by allowing network management systems to communicate with these devices, collecting and organizing information about their status and performance. SNMP identifies objects on a network using unique identifiers and manages network devices through get, set, and trap messages. SNMP has three main components: the management system that makes requests, the agents that reply to the requests, and the managed devices that are monitored and controlled by the management system. It is widely used by network administrators to proactively monitor network performance and troubleshoot issues on the network.&lt;/p></description></item><item><title>🧪 Burp Proxy</title><link>https://www.arjenwiersma.nl/handbook/100_basics/burp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.arjenwiersma.nl/handbook/100_basics/burp/</guid><description>&lt;p>
To view and manipulate network traffic to and from websites we often use a tool called Burp Suite.&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Viewing traffic with the Proxy
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>To view traffic to and from websites Brup makes acts a so-called &amp;#34;proxy&amp;#34;, acting as a middleman between the browser and webserver. The easiest way to connect through this proxy is by using Burp&amp;#39;s built-in browser. To open this browser head to the &lt;code>Proxy&lt;/code> tab, the &lt;code>Intercept&lt;/code> tab and click on &lt;code>Open Browser&lt;/code>.&lt;/p></description></item></channel></rss>